//

pipeline {

  agent {
    node {
      label "unity3d"
      customWorkspace "/home/jenkins/workspace/simulator"
    }
  }

  options {
    gitLabConnection("${GITLAB_HOST}")
    skipDefaultCheckout(true)
    timestamps()
  }

  environment {
    UNITY_USERNAME = credentials("UNITY_USERNAME")
    UNITY_PASSWORD = credentials("UNITY_PASSWORD")
    UNITY_SERIAL = credentials("UNITY_SERIAL")
    CODE_SIGNING_PASSWORD = credentials("LGSVL_CODE_SIGNING_PASSWORD")
    BUILD_BUNDLES = "true"
    PYTHONUNBUFFERED = "1"
    DISPLAY = ":0"
    GIT_TAG = "${GIT_TAG}"
    CODE_SIGNING_FILE = "/dev/urandom"
  }

  stages {

    stage("Git") {
      steps {

        mail to: "${SIMULATOR_RELEASE_EMAILS}", subject: "Starting ${GIT_TAG} release build", body: "Starting ${GIT_TAG} release build: ${BUILD_URL}"

        script {
          env.S3_DOWNLOAD_HOST = "${S3_RELEASE_DOWNLOAD_HOST}"
          env.S3_BUCKET_NAME = "${S3_RELEASE_BUCKET_NAME}"
          env.AWS_ACCESS_KEY_ID = "${AWS_RELEASE_ACCESS_KEY_ID}"
          env.AWS_SECRET_ACCESS_KEY = "${AWS_RELEASE_SECRET_ACCESS_KEY}"
        }

        checkout([
          $class: "GitSCM",
          branches: [[name: "refs/tags/${GIT_TAG}"]],
          browser: [$class: "GitLab", repoUrl: "https://${GITLAB_HOST}/HDRP/Simulator", version: env.GITLAB_VERSION],
          extensions: [
            [$class: "LocalBranch"],
            [$class: "GitLFSPull"]
          ],
          userRemoteConfigs: [[
            credentialsId: "auto-gitlab",
            url: "git@${GITLAB_HOST}:HDRP/Simulator.git"
          ]]
        ])

        script {
          env.GIT_COMMIT = sh(returnStdout: true, script: "git rev-parse HEAD").trim()
        }

        script {

          def environments = env.SIMULATOR_ENVIRONMENTS.split(',')
          for (int i=0; i<environments.size(); i++) {
            def environment = environments[i]
            checkout([
              $class: "GitSCM",
              branches: [[name: "refs/heads/master"]],
              browser: [$class: "GitLab", repoUrl: "https://${GITLAB_HOST}/HDRP/Environments/${environment}", version: env.GITLAB_VERSION],
              extensions: [
                [$class: "RelativeTargetDirectory", relativeTargetDir: "Assets/External/Environments/${environment}"],
                [$class: "LocalBranch"],
                [$class: "GitLFSPull"]
              ],
              userRemoteConfigs: [[
                credentialsId: "auto-gitlab",
                url: "git@${GITLAB_HOST}:HDRP/Environments/${environment}.git"
              ]]
            ])
          }

          def vehicles = env.SIMULATOR_VEHICLES.split(',')
          for (int i=0; i<vehicles.size(); i++) {
            def vehicle = vehicles[i]
            checkout([
              $class: "GitSCM",
              branches: [[name: "refs/heads/master"]],
              browser: [$class: "GitLab", repoUrl: "https://${GITLAB_HOST}/HDRP/Vehicles/${vehicle}", version: env.GITLAB_VERSION],
              extensions: [
                [$class: "RelativeTargetDirectory", relativeTargetDir: "Assets/External/Vehicles/${vehicle}"],
                [$class: "LocalBranch"],
                [$class: "GitLFSPull"]
              ],
              userRemoteConfigs: [[
                credentialsId: "auto-gitlab",
                url: "git@${GITLAB_HOST}:HDRP/Vehicles/${vehicle}.git"
              ]]
            ])
          }

        } // script

        sh "rm -rf *.zip *.html *.xml AssetBundles"
      }
    }

    stage("Docker") {
      environment {
        DOCKER = credentials("Jenkins-Gitlab")
      }
      steps {
        dir("Docker") {
          sh """
            docker login -u ${DOCKER_USR} -p ${DOCKER_PSW} ${GITLAB_HOST}:4567
            docker-compose build build-simulator
            docker-compose push build-simulator
            docker-compose pull build-webui
          """
        }
      }
    }

    stage("WebUI") {
      steps {
        dir("Docker") {
          sh "UID=`id -u` docker-compose run --rm build-webui-p"
        }
      }
    }

    stage("Check") {
      steps {
        dir("Docker") {
          sh "UID=`id -u` docker-compose run --rm build-simulator check"
        }
      }
      post {
        success {
          archiveArtifacts "*-check-${GIT_TAG}.html"
        }
      }
    }

    stage("Test") {
      steps {
        dir("Docker") {
          sh "UID=`id -u` docker-compose run --rm build-simulator test"
        }
      }
      post {
        success {
          xunit([NUnit3(pattern: "*-test-${GIT_TAG}.xml", deleteOutputFiles: true)])
        }
      }
    }

    stage("Windows") {

      steps {
        dir("Docker") {
          withCredentials([file(credentialsId: "LGSVL_CODE_SIGNING_FILE", variable: "CODE_SIGNING_FILE")]) {
            sh "UID=`id -u` docker-compose run --rm build-simulator windows"
          }
        }
      }

      post {
        success {
          archiveArtifacts "*-windows64-${GIT_TAG}.zip"
        }
      }

    } // Windows

    stage("Linux") {

      steps {
        dir("Docker") {
          sh "UID=`id -u` docker-compose run --rm build-simulator linux"
        }
      }

      post {
        success {
          archiveArtifacts "*-linux64-${GIT_TAG}.zip"
        }
      }

    } // Linux

    stage("Bundles") {

      steps {
        dir("Docker") {
          sh "UID=`id -u` docker-compose run --rm build-bundles"
          sh "UID=`id -u` docker-compose run --rm upload-bundles"
        }
      }

      post {
        success {
          archiveArtifacts "*-bundles-${GIT_TAG}.html"
        }
      }

    } // Bundles

  } // stages

  post {
    failure {
      mail to: "${SIMULATOR_RELEASE_EMAILS}", subject: "Failed ${GIT_TAG} release build", body: "Failed ${GIT_TAG} release build: ${BUILD_URL}"
    }
    success {
      mail to: "${SIMULATOR_RELEASE_EMAILS}", subject: "Finished ${GIT_TAG} release build", body: "Finished ${GIT_TAG} release build: ${BUILD_URL}"
    }
  }

}
